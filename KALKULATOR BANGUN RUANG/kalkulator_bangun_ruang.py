# -*- coding: utf-8 -*-
"""Kalkulator_Bangun_Ruang.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10cWud_PYJmShjGzYVcpijq3RHKTey_b8
"""

import math
import sys
import time

def cube(side):
    volume = side**3
    surface_area = 6 * side**2
    return volume, surface_area

def cuboid(length, width, height):
    volume = length * width * height
    surface_area = 2 * (length*width + width*height + length*height)
    return volume, surface_area

def sphere(radius):
    volume = (4/3) * math.pi * radius**3
    surface_area = 4 * math.pi * radius**2
    return volume, surface_area

def cylinder(radius, height):
    volume = math.pi * radius**2 * height
    surface_area = 2 * math.pi * radius * (radius + height)
    return volume, surface_area

def cone(radius, height):
    slant = math.sqrt(radius**2 + height**2)
    volume = (1/3) * math.pi * radius**2 * height
    surface_area = math.pi * radius * (radius + slant)
    return volume, surface_area

def square_pyramid(base_side, height):
    slant = math.sqrt((base_side/2)**2 + height**2)
    volume = (1/3) * base_side**2 * height
    surface_area = base_side**2 + 2 * base_side * slant
    return volume, surface_area

def triangular_prism(base, height_triangle, length):
    volume = (1/2) * base * height_triangle * length
    side_a = base
    side_b = height_triangle
    side_c = math.sqrt(base**2 + height_triangle**2)
    perimeter = side_a + side_b + side_c
    surface_area = 2 * (0.5 * base * height_triangle) + perimeter * length
    return volume, surface_area

def animate_shape(shape_name):
    # Basic text animation for fun - simulate rotation with characters
    frames = [
        f"   {shape_name} [|]",
        f"   {shape_name} [/]",
        f"   {shape_name} [-]",
        f"   {shape_name} [\\]",
    ]
    print("\nAnimasi bangun ruang:")
    for _ in range(8):
        for frame in frames:
            sys.stdout.write("\r" + frame)
            sys.stdout.flush()
            time.sleep(0.2)
    print("\rAnimasi selesai!      \n")

def main():
    shapes = {
        '1': ('Kubus', cube, ['Panjang sisi']),
        '2': ('Balok', cuboid, ['Panjang', 'Lebar', 'Tinggi']),
        '3': ('Bola', sphere, ['Jari-jari']),
        '4': ('Tabung', cylinder, ['Jari-jari', 'Tinggi']),
        '5': ('Kerucut', cone, ['Jari-jari', 'Tinggi']),
        '6': ('Limas Segiempat', square_pyramid, ['Panjang sisi alas', 'Tinggi']),
        '7': ('Prisma Segitiga', triangular_prism, ['Panjang alas segitiga', 'Tinggi segitiga', 'Panjang prisma'])
    }

    while True:
        print("Kalkulator Volume dan Luas Permukaan Bangun Ruang")
        for key, (name, _, _) in shapes.items():
            print(f"{key}. {name}")
        print("0. Keluar")

        choice = input("Pilih bangun ruang (0 untuk keluar): ").strip()
        if choice == '0':
            print("Terima kasih! Program selesai.")
            break

        if choice not in shapes:
            print("Pilihan tidak valid. Silakan coba lagi.\n")
            continue

        shape_name, func, params = shapes[choice]
        print(f"Masukan {shape_name}:")
        args = []
        try:
            for param in params:
                val = float(input(f"{param}: "))
                if val <= 0:
                    raise ValueError("Nilai harus lebih dari 0.")
                args.append(val)
        except ValueError as e:
            print(f"Input tidak valid: {e}\n")
            continue

        volume, surface_area = func(*args)
        print(f"\nHasil untuk {shape_name}:")
        print(f"Volume = {volume:.4f} satuan³")
        print(f"Luas Permukaan = {surface_area:.4f} satuan²")
        animate_shape(shape_name)
        print("\n")

if __name__ == "__main__":
    main()
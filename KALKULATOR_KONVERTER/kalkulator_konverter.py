# -*- coding: utf-8 -*-
"""Kalkulator.Konverter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N0RxvIeVrgzE4Rc_E1eebofax8eKWDDT
"""

import streamlit as st
import time

# ====================
# FUNGSI KONVERSI
# ====================

def convert_with_ratio(value, from_unit, to_unit, unit_dict):
    # Konversi satuan berbasis rasio terhadap base unit
    return value * unit_dict[from_unit] / unit_dict[to_unit]

def convert_temperature(value, from_unit, to_unit):
    # Konversi suhu antar C, F, K
    if from_unit == to_unit:
        return value
    if from_unit == "C":
        if to_unit == "F":
            return value * 9/5 + 32
        elif to_unit == "K":
            return value + 273.15
    elif from_unit == "F":
        if to_unit == "C":
            return (value - 32) * 5/9
        elif to_unit == "K":
            return (value - 32) * 5/9 + 273.15
    elif from_unit == "K":
        if to_unit == "C":
            return value - 273.15
        elif to_unit == "F":
            return (value - 273.15) * 9/5 + 32

# ====================
# DATA KONVERSI (Faktor ke base unit)
# ====================

unit_types = {
    "Jarak": {
        "units": {"km": 1000, "m": 1, "cm": 0.01, "mm": 0.001},
        "converter": convert_with_ratio
    },
    "Luas": {
        # Base unit: m2
        "units": {"km2": 1_000_000, "m2": 1, "cm2": 0.0001, "mm2": 0.000001},
        "converter": convert_with_ratio
    },
    "Berat": {
        # Base unit: gram (g)
        "units": {"ton": 1_000_000, "kg": 1000, "ons": 100, "g": 1, "mg": 0.001},
        "converter": convert_with_ratio
    },
    "Waktu": {
        # Base unit: detik
        "units": {"hari": 86400, "jam": 3600, "menit": 60, "detik": 1},
        "converter": convert_with_ratio
    },
    "Volume": {
        # Base unit: liter
        "units": {"m3": 1000, "liter": 1, "ml": 0.001, "cm3": 0.001},
        "converter": convert_with_ratio
    },
    "Suhu": {
        # Satuan suhu khusus, tidak berbasis rasio
        "units": {"C": 1, "F": 1, "K": 1},
        "converter": convert_temperature
    }
}

# ====================
# STREAMLIT UI
# ====================

st.set_page_config(page_title="Konversi Satuan", page_icon="üßÆ")

# Sidebar tema & efek animasi
with st.sidebar:
    st.header("üé® Tema & Efek")
    tema = st.radio("Pilih Tema Tampilan:", ["Terang", "Gelap"])
    efek = st.selectbox("Pilih Efek Animasi:", ["Confetti (Salju)", "Tidak ada"])

# Warna sesuai tema
bg_color = "#ffffff" if tema == "Terang" else "#222222"
text_color = "#000000" if tema == "Terang" else "#ffffff"
box_color = "#d1ecf1" if tema == "Terang" else "#444444"

# Judul & deskripsi
st.markdown(f"<h1 style='color:{text_color};'>üßÆ Kalkulator Konversi Satuan</h1>", unsafe_allow_html=True)
st.markdown(f"<p style='color:{text_color};'>Konversi Jarak, Luas, Berat, Waktu, Volume, Suhu dengan animasi</p>", unsafe_allow_html=True)

# Pilih jenis konversi
conversion_type = st.selectbox("üîß Pilih jenis konversi", list(unit_types.keys()))
unit_data = unit_types[conversion_type]
units = list(unit_data["units"].keys())

# Input nilai dan satuan
value = st.number_input("Masukkan nilai", min_value=0.0, value=1.0)
from_unit = st.selectbox("Dari satuan", units)
to_unit = st.selectbox("Ke satuan", units)

if st.button("üöÄ Konversi"):
    progress = st.progress(0, text="‚è≥ Menghitung...")
    for i in range(100):
        time.sleep(0.008)
        progress.progress(i + 1, text=f"‚è≥ Menghitung... {i + 1}%")

    with st.spinner("üìä Menyusun hasil..."):
        time.sleep(0.3)
        if conversion_type == "Suhu":
            result = unit_data["converter"](value, from_unit, to_unit)
        else:
            result = unit_data["converter"](value, from_unit, to_unit, unit_data["units"])

    if efek == "Confetti (Salju)":
        st.snow()

        st.success("‚úÖ Konversi selesai!")
    st.markdown(f"""
        <div style='background-color:{box_color};padding:20px;border-radius:10px'>
            <h3 style='color:{text_color};'>Hasil:</h3>
            <p style='font-size:24px;color:{text_color};'>
                <b>{value} {from_unit} = {format(result, '.10g')} {to_unit}</b>
            </p>
        </div>
    """, unsafe_allow_html=True)
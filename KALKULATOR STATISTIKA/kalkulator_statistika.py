# -*- coding: utf-8 -*-
"""Kalkulator_Statistika.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10cWud_PYJmShjGzYVcpijq3RHKTey_b8
"""

import math
import statistics
import sys
import time
import threading
import matplotlib.pyplot as plt
import matplotlib.animation as animation

def spinner(stop_event):
    while not stop_event.is_set():
        for cursor in '|/-\\':
            sys.stdout.write(f'\rMenghitung... {cursor}')
            sys.stdout.flush()
            if stop_event.wait(0.1):
                break
    sys.stdout.write('\rSelesai!          \n')

def get_data():
    while True:
        raw = input("Masukkan data angka, pisahkan dengan koma (contoh: 1,2,3,4,5):\n")
        try:
            data = [float(x.strip()) for x in raw.split(',')]
            if len(data) == 0:
                raise ValueError
            return data
        except ValueError:
            print("Input tidak valid, pastikan memasukkan angka yang benar dan minimal satu data.")

def calculate_stats(data):
    mean = statistics.mean(data)
    median = statistics.median(data)
    try:
        mode = statistics.mode(data)
    except statistics.StatisticsError:
        mode = "Tidak ada modus unik"
    variance = statistics.variance(data)
    std_dev = statistics.stdev(data)
    return mean, median, mode, variance, std_dev

def animate_histogram(data):
    fig, ax = plt.subplots()
    ax.set_title('Histogram Data')
    ax.set_xlabel('Nilai')
    ax.set_ylabel('Frekuensi')
    bins = max(5, min(20, len(set(data))))
    n, bins, patches = ax.hist([], bins=bins, edgecolor='black')

    def init():
        ax.clear()
        ax.set_title('Histogram Data')
        ax.set_xlabel('Nilai')
        ax.set_ylabel('Frekuensi')
        for patch in patches:
            patch.set_height(0)
        return patches

    def update(frame):
        subset = data[:frame+1]
        ax.clear()
        ax.set_title('Histogram Data')
        ax.set_xlabel('Nilai')
        ax.set_ylabel('Frekuensi')
        ax.hist(subset, bins=bins, edgecolor='black', color='skyblue')
        return patches

    ani = animation.FuncAnimation(fig, update, frames=len(data), init_func=init, repeat=False, interval=200)
    plt.show()

def main():
    data = get_data()

    # Start spinner animation in separate thread during calculation
    stop_event = threading.Event()
    spin_thread = threading.Thread(target=spinner, args=(stop_event,))
    spin_thread.start()

    # Simulate calculation time
    time.sleep(2)
    mean, median, mode, variance, std_dev = calculate_stats(data)

    stop_event.set()
    spin_thread.join()

    print(f"\nHasil statistik dari data:")
    print(f"Rata-rata (Mean)      : {mean:.4f}")
    print(f"Median               : {median:.4f}")
    print(f"Modus                : {mode}")
    print(f"Varians              : {variance:.4f}")
    print(f"Deviasi Standar      : {std_dev:.4f}")

    animate_histogram(data)

if __name__ == '__main__':
    main()